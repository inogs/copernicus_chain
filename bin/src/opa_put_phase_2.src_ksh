#!/bin/ksh

# Load common profile
. @@(I:OPA_HOME)/bin/opa_profile.inc
opa_prex "source $OPA_VENV_1/bin/activate"
PYTHONPATH=${PYTHONPATH}:$OPA_BITSEA
PATH=$PATH:$OPA_BINDIR

function print_help {
  cat <<EofCat
Usage: $OPA_PROGNAME [options]
[options]
        --help|-h                               show this help
	--no-dnt				delivers the products, but doesn't deliver the delivery note	
                                                ["$_NO_DNT"]
        --dry-run                               doesn't deliver, just prints the delivery commands
                                                ["$_DRY_RUN"]
        --max-tries                             max tries per file
                                                ["$_MAX_TRIES"]
        --type|-y                               mandatory from V2C onwards; specifies the type
                                                of files to send ("BIOL","NUTR","CARB","PFTC","CO2F")
EofCat
}


###CONFIGURE THE LINES BELOW
product=MEDSEA_ANALYSIS_FORECAST_BIO_006_014
PushingEntity="MED-OGS-TRIESTE-IT"

_NO_DNT=false
_DRY_RUN=false
typeset -i _MAX_TRIES=10
while [[ ${#@} -ne 0 ]] ; do
  arg="$1"
  shift 1
  case "$arg" in
    --help|-h)
      print_help
      exit 0
      ;;
    --no-dnt)
      _NO_DNT=true
      ;;
    --dry-run)
      _DRY_RUN=true
      ;;
    --max-tries)
      _MAX_TRIES="$1"
      shift 1
      ;;
    --type|-y)
      _TYPE="$1"
      shift 1
      ;;
    *)
      echo "ERROR: wrong command line option <$arg>" 1>&2
      exit 2
      ;;
  esac
done

function decide_action {
   # arg1 = local product file
   # arg2 = remote product file
   # returns in the exit_status a code for the actions to do

   # 1 means nothing to do
   # 2 means send
   # 3 means send and delete
   # 4 means error

   local_file=$1
   remotefile=$2

   remotebul_time=${remotefile:34:8}
       remotetype=${remotefile:43:2}
   local_bul_time=${local_file:34:8}
       local_type=${local_file:43:2}

   if [[ $remotefile == $local_file ]]   ; then return 1 ; fi
   if [[ $remotefile == "" ]]            ; then return 2 ; fi

   if ( [[ $remotetype == fc ]] || [[ $remotetype == sm ]]  ) && [[ $local_type == an ]] ; then return 3 ; fi
   if [[ $remotetype == fc ]] && [[ $local_type == sm ]]                                 ; then return 3 ; fi
   if [[ $remotetype == an ]] && ( [[ $local_type == sm ]] || [[ $local_type == fc ]] )  ; then return 4 ; fi
   if [[ $remotetype == sm ]] && [[ $local_type == fc ]]                                 ; then return 4 ; fi

   if [[ $local_bul_time > $remotebul_time ]]                                            ; then return 3 ; fi
   if [[ $remotetype == $local_type ]] && [[ $local_bul_time < $remotebul_time ]]        ; then return 4 ; fi

}



# Rundate definition
opa_prex "opa_set_default_run $opa_set_default_run_options"
opa_prex "opa_set_run"

# start
opa_start

#Directory settings (they need the above opa_start)
PROD_DIR=$OPA_WRKDIR/POSTPROC/PRODUCTS
ARCHIVE_DIR=$I_OPA_HOME/archive
RUNDATE=$OPA_RUNDATE
#Set up the type of the files to transfer
if [[ "$_TYPE" == "BIOL" ]]; then
  type="bio"
elif [[ "$_TYPE" == "CARB" ]]; then
  type="car"
elif [[ "$_TYPE" == "NUTR" ]]; then
  type="nut"
elif [[ "$_TYPE" == "PFTC" ]]; then
  type="pft"
elif [[ "$_TYPE" == "CO2F" ]]; then
  type="co2"
else
  opa_log 0 "ERR: wrong type in opa_put (must be NUTR,PFTC,CARB,BIOL or CO2F)"
  opa_exit 1
fi

dataset=med00-ogs-${type}-an-fc-d_202003
FILES_TO_SEND="*${_TYPE}*.nc"

#DNT file definitions
DntTime=`date --utc +%Y%m%dT%H%M%SZ`
DNT_FILE=$PROD_DIR/${product}_${DntTime}.xml
#DNT_FILE=DNT.xml #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

cat <<EOFCAT
_NO_DNT ................ $_NO_DNT
_DRY_RUN ............... $_DRY_RUN
_MAX_TRIES ............. $_MAX_TRIES
EOFCAT

#XML file head
 echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" >  $DNT_FILE
 echo "<delivery product=\"${product}\" PushingEntity=\"${PushingEntity}\" date=\"${DntTime}\">" >> $DNT_FILE
 echo "    <dataset DatasetName=\"${dataset}\">" >> $DNT_FILE

#Set up the ncftp credentials from the .cmems.ncconfig file (filepath indicated in opa_profile)
OPA_NCCONFIGS_FILE=$OPA_PRO_REMOTE_SERVER_NCCONFIGS_PHASE_2
for ncconfig in $OPA_NCCONFIGS_FILE ; do
    ogs_host=$(cat $ncconfig|grep -e "host"|cut -d " " -f2)
    ogs_user=$(cat $ncconfig|grep -e "user"|cut -d " " -f2)
#             echo "xxx${ogs_user}xxx"
    ogs_pass=$(cat $ncconfig|grep -e "pass"|cut -d " " -f2)
done

#Set up the ncftp credentials from the .cmcc.ncconfig file, for delivering the DNTs to the archive
OPA_NCCONFIGS_FILE_DNT=$OPA_PRO_REMOTE_SERVER_NCCONFIGS
for ncconfig in $OPA_NCCONFIGS_FILE_DNT ; do
    ogs_host_dnt=$(cat $ncconfig|grep -e "host"|cut -d " " -f2)
    ogs_user_dnt=$(cat $ncconfig|grep -e "user"|cut -d " " -f2)
#             echo "xxx${ogs_user}xxx"
    ogs_pass_dnt=$(cat $ncconfig|grep -e "pass"|cut -d " " -f2)
    ogs_port_dnt=$(cat $ncconfig|grep -e "port"|cut -d " " -f2)
done

#error counter
errs=0
filecount=0
upload_xml=False
for file in `ls ${PROD_DIR}/${FILES_TO_SEND}` ; do
    filecount=$(( $filecount + 1 ))
    echo "Processing file no. $filecount: $file"

    basefile=`basename $file`
    yyyy=${basefile:0:4}
      mm=${basefile:4:2}
     day=${basefile:0:8}
    # -------------------------------------
    echo "DEBUG " ${OPA_BINDIR}/get_daily_product_in_DU.sh -d $day -t $_TYPE
    remote_name=`${OPA_BINDIR}/get_daily_product_in_DU.sh -d $day -t $_TYPE `
    decide_action $basefile $remote_name
    ACTION=$?
    # -------------------------------------

 case $ACTION in
   1) echo "$basefile already in DU" ;;
   2|3) echo "$basefile has to be sent"
    upload_xml=True
    if [ $ACTION -eq 3 ]; then echo " and $remote_name will be removed "; fi

    #setup the remote directory and check the md5s of the files to send

    remotedir=/${product}/${dataset}/$yyyy/$mm
    remotefile="${yyyy}/${mm}/${basefile}"
    md5s=`md5sum $file|awk '{print $1}'`
	StarTime=`date --utc +%Y%m%dT%H%M%SZ`
	EndTime=${StarTime}
	NumberOfAttempts=1
	errCod=0

    to_remove_file=$yyyy/$mm/$remote_name
    DELETE_STR="<file FileName=\"${to_remove_file}\" > <KeyWord>Delete</KeyWord> </file>"



  #actual send of the file
	for i in `seq 1 $_MAX_TRIES`;do
	      put_command="$OPA_BINDIR/ncftpput -u ${ogs_user} -p ${ogs_pass} -T .tmp. ${ogs_host} $remotedir ${file} 2>&1"
              if $_DRY_RUN ; then
                echo "SIMULATE: >>> $put_command"
                success=true
                break
              else
                opa_prex_with_output "$OPA_BINDIR/ncftpput -u ${ogs_user} -p ${ogs_pass} -T .tmp. ${ogs_host} $remotedir ${file} 2>&1"; errCod=$?
                stderr=$my_var
                if [ ${errCod} -eq 0 ];then
                   EndTime=`date --utc +%Y%m%dT%H%M%SZ`
                   break
                else
# storage on arrays for future use  ##########
                  ERRCOD[$NumberOfAttempts]=${errCod}
                  STDERR[$NumberOfAttempts]=${stderr}
                  lastErrCod=${errCod}
                  lastError=${stderr}
		   ((NumberOfAttempts++))	    
		 fi

               fi
	done
     
#check success of file transfer
        status=Delivered
        if [[ "${StarTime}" == "${EndTime}" ]];then
	    status=Failed
            errs=$(( $errs + 1 ))
	    if [[ $NumberOfAttempts -eq $_MAX_TRIES+1 ]] ; then
	       NumberOfAttempts=$_MAX_TRIES
	    fi  
 	fi
	
	if [[ ${NumberOfAttempts} -eq 1 ]] ; then 
	    close="/"
 	else
	    close=""
	fi

#Write transfer info to XML file
	FINAL_STR="<file FileName=\"${remotefile}\" StartUploadTime=\"${StarTime}\"  StopUploadTime=\"${EndTime}\" Checksum=\"${md5s}\"  FinalStatus=\"${status}\"${close}>"
	echo "             $FINAL_STR" >> $DNT_FILE

	if [[ ${NumberOfAttempts} -ne 1 ]]; then
	    close=""
	    RESEND_STR="<resendAttempt DueToErrorCode=\"${lastErrCod}\" DueToErrorMsg=\"${lastError}\" NumberOfAttempts=\"${NumberOfAttempts}\"/>"
	    echo "                         $RESEND_STR" >> $DNT_FILE
	    echo "                </file>" >> $DNT_FILE
	fi
        if [[ $status == Delivered ]] && [[ $ACTION -eq 3 ]] ; then
            echo "             $DELETE_STR"  >> $DNT_FILE
        fi
     ;;

   4) echo "ERROR in send algorithm "
      echo "You are trying to replace: a product with a lower quality one"
      ;;
   *) echo "wrong decide_action exit status"; exit 1 ;;
 esac

done

#XML file delivery
echo "    </dataset>"  >> $DNT_FILE
echo "</delivery>" >> $DNT_FILE
if $_NO_DNT; then
  echo "NO_DNT: not delivering XML file"
elif $_DRY_RUN; then
  echo "SIMULATING: not delivering XML file"
else

if [ $upload_xml == "True" ] ; then
  opa_prex "$OPA_BINDIR/ncftpput -u ${ogs_user} -p ${ogs_pass} -T .tmp. ${ogs_host} /${product}/DNT $DNT_FILE"
else
   echo "$DNT_FILE will not uploaded"
fi
fi


#Check on errors and close the script
if [[ $errs -eq 0 ]] ; then
    opa_log 0 "pro upload on ftp server completed successfully"
    opa_report "bio_transfer-tl-output_delivery_done" "0" "true"
    pro_successfully_uploaded=true
else
    pro_successfully_uploaded=false
    opa_log 0 "ERROR: pro upload on ftp server failed. $errs files failed delivery"
fi

opa_exit "$errs"


