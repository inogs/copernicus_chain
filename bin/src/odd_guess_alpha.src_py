#!/usr/bin/env python

import argparse
from partition import *

def main():
    NY = 128
    NZ = 72

    parser = argparse.ArgumentParser(description='Compare two solutions and try to guess ratio')

    parser.add_argument(   '--array-filename', '-a',
                                type=str,
                                default=None,
                                help='file containing the input array')

    parser.add_argument(   '--odd-filename-1', '-o',
                                type=str,
                                default=None,
                                help='file containing the first input ODD')

    parser.add_argument(   '--timing-1', '-t',
                                type=float,
                                default=None,
                                help='timing with the first ODD')

    parser.add_argument(   '--odd-filename-2', '-O',
                                type=str,
                                default=None,
                                help='file containing the second input ODD')

    parser.add_argument(   '--timing-2', '-T',
                                type=float,
                                default=None,
                                help='timing with the second ODD')

    parser.add_argument(   '--ny', '-y',
				type=int,
				default=NY,
				help='number of latitudes')

    parser.add_argument(   '--nz', '-z',
				type=int,
				default=NZ,
				help='number of levels')


    args = parser.parse_args()


    odd1 = PManager.load_odd(args.odd_filename_1)
    partition1 = PManager.odd2partition(odd1)
    NS1 = len(odd1)

    odd2 = PManager.load_odd(args.odd_filename_2)
    partition2 = PManager.odd2partition(odd2)
    NS2 = len(odd2)

    assert NS1 == NS2, "different partition sizes {0} != {1}".format(NS1, NS2)

    NS = NS1

    pmanager = PManager(NS, args.array_filename)


    t1 = args.timing_1
    t2 = args.timing_2
    ny = args.ny
    nz = args.nz
    if t1 is not None and t2 is not None:
 
        t_ratio = t1 / t2
        data = []
        N = 1000
        for i in xrange(N):
            wp_ratio_i = i / float(N)
            # t = t_wp + t_np
            # find the dominant cell:
            tl_1 = []
            tl_2 = []
            for (ib1, il1), (ib2, il2) in zip(partition1, partition2):
                nt_points_1 = (il1 - ib1) * ny * nz
                nw_points_1 = sum(pmanager.array[ib1:il1])
                t_1 = (nt_points_1 * wp_ratio_i) + nw_points_1
                tl_1.append(t_1)
                nt_points_2 = (il2 - ib2) * ny * nz
                nw_points_2 = sum(pmanager.array[ib2:il2])
                t_2 = (nt_points_2 * wp_ratio_i) + nw_points_2
                tl_2.append(t_2)
                #print "   ", nt_points_1, nw_points_1, nt_points_2, nw_points_2
            #raw_input("...")
            m1 = max(tl_1)
            m2 = max(tl_2)
            #print i, wp_ratio_i, m1, m2
            data.append((wp_ratio_i, abs((m1 / m2) - t_ratio)))
        data.sort(key=lambda x: x[1])
        wp_ratio = data[0][0]
        print "==>", wp_ratio



if __name__ == "__main__":
    main()
