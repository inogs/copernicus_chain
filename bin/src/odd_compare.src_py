#!/usr/bin/env python

import os
import sys
import argparse

from partition import *

def main():
    NY = 128
    parser = argparse.ArgumentParser(description='Find the balanced partition of an array')

    parser.add_argument(   '--array-filename', '-a',
                                type=str,
                                default=None,
                                help='file containing the input array')

    parser.add_argument(   '--odd-filename-1', '-1',
                                type=str,
                                default=None,
                                help='file containing the first input ODD')

    parser.add_argument(   '--odd-filename-2', '-2',
                                type=str,
                                default=None,
                                help='file containing the first input ODD')

    parser.add_argument(   '--ny', '-y',
                                type=int,
                                default=128,
                                help='number of latitudes')

    parser.add_argument(   '--nz', '-z',
                                type=int,
                                default=72,
                                help='number of vertical levels')

    parser.add_argument(   '--rootname', '-r',
                                type=str,
                                default="plot{nprocs}",
                                help='root filename for output files')

    parser.add_argument(   '--viewer', '-v',
                                type=str,
                                default="eog",
                                help='viewer for plots')

    parser.add_argument(   '--alpha',
                                type=float,
                                default=0.75,
                                help='alpha value')

    args = parser.parse_args()

    if args.array_filename is None:
        sys.stderr.write("ERR: missing mandatory array filename\n")
        sys.exit(1)

    if args.odd_filename_1 is None:
        sys.stderr.write("ERR: missing mandatory ODD filename 1\n")
        sys.exit(1)

    if args.odd_filename_2 is None:
        sys.stderr.write("ERR: missing mandatory ODD filename 2\n")
        sys.exit(1)


    odd1 = PManager.load_odd(args.odd_filename_1)
    partition1 = PManager.odd2partition(odd1)
    NS1 = len(odd1)

    odd2 = PManager.load_odd(args.odd_filename_2)
    partition2 = PManager.odd2partition(odd2)
    NS2 = len(odd2)

    if NS1 != NS2:
        sys.stderr.write("ERR: different partition sizes: {0} != {1}\n".format(NS1, NS2))
        sys.exit(1)

    NS = NS1

    pmanager = PManager(NS, args.array_filename)
    
    keys = []
    for skey in 'yz':
        lkey = 'n{0}'.format(skey)
        keys.append((skey, lkey))
    for skey, lkey in keys:
        if getattr(args, lkey, None) is None:
            sys.stderr.write("ERR: mandatory argument --{0}/-{1} is missing\n".format(lkey, skey))
            sys.exit(2)

    nyz = args.ny * args.nz

    tmpdir = '.'
    
    rootname = args.rootname.format(nprocs=NS)

    data_filename = os.path.join(tmpdir, "{0}.dat".format(rootname))
    cmds_filename = os.path.join(tmpdir, "{0}.gnuplot".format(rootname))
    plot_filename = os.path.join(tmpdir, "{0}.png".format(rootname))

    with open(data_filename, 'wb') as output_file:
        fmt = "{0}\t{1}\t{2}\t{3}\t{4}\n"
        output_file.write(fmt.format("#I", "SEA1", "ALL1", "SEA2", "ALL2"))
        for i, ((ib1, il1), (ib2, il2)) in enumerate(zip(partition1, partition2)):
            n_sea_1 = sum(pmanager.array[ib1:il1])
            n_all_1 = (il1 - ib1) * nyz
            n_sea_2 = sum(pmanager.array[ib2:il2])
            n_all_2 = (il2 - ib2) * nyz
            output_file.write(fmt.format(i, n_sea_1, n_all_1, n_sea_2, n_all_2))

    opts = {
		'data_filename':	data_filename,
		'plot_filename':	plot_filename,
		'cmds_filename':	cmds_filename,
		'NS':			NS,
		'viewer':		args.viewer,
		'alpha':		args.alpha,
    }
    with open(cmds_filename, 'wb') as output_file:
        output_file.write("""
set terminal png
set out "{plot_filename}"
set size   1.0, 1.0
set origin 0.0, 0.0

set multiplot

set size   1.0, 0.5
set origin 0.0, 0.5
plot "{data_filename}" using 1:2		with linespoints title "sea_opt",	\\
     "{data_filename}" using 1:3		with linespoints title "all_opt"

set size   1.0, 0.5
set origin 0.0, 0.0
plot "{data_filename}" using 1:4		with linespoints title "sea_opt_corr",	\\
     "{data_filename}" using 1:5		with linespoints title "all_opt_corr",	\\
     "{data_filename}" using ($4+{alpha}*$5)	with linespoints title "tot_opt_corr"
unset multiplot
        """.format(**opts))
    gnuplot_command = "gnuplot {cmds_filename}".format(**opts)
    os.system(gnuplot_command)

    if args.viewer:
        os.system("{viewer} {plot_filename}".format(**opts))

if __name__ == "__main__":
    main()
