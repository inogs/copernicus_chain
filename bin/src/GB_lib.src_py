#!/usr/bin/env python
import os,time
import scipy.io.netcdf as NC
import datetime
from dateutil.relativedelta import relativedelta
import numpy as np

def MoreRecent(file1,file2):
    A=time.gmtime(os.path.getmtime(file1))
    B=time.gmtime(os.path.getmtime(file2))
    return A>B


def WriteBigAve(N1pfile, outfile, varlistfile):
    VARS=[]
    filein=file(varlistfile)
    for var in filein:
        VARS.append(var[:-1])
    filein.close()    
    
    if len(VARS)==0:
        print "No variables in ", varlistfile
        return
            
    nc=NC.netcdf_file(N1pfile,"r");
    DIMS=nc.dimensions;

    year =int( outfile[-20:-16] )
    month=int( outfile[-16:-14] )
    day  =int( outfile[-14:-12] )
    d=datetime.datetime(year,month,day)
    julian = np.double( d.strftime("%j") ),

    ncOUT=NC.netcdf_file(outfile,"w")
    setattr(ncOUT,"Convenctions","COARDS")
    setattr(ncOUT,"DateStart",nc.DateStart)
    setattr(ncOUT,"Date__End",nc.Date__End)
        
    
    for dimName,dimValue in DIMS.items():
        ncOUT.createDimension(dimName,dimValue)
    
    for var in ['lon','lat','depth']:
        ncvar=ncOUT.createVariable(var,'f',(var,))

        ncvar[:]=nc.variables[var].data
        setattr(ncvar,"actual_range",nc.variables[var].actual_range)
        setattr(ncvar,"units"       ,nc.variables[var].units)
    nc.close()
    ncvar=ncOUT.createVariable('time','d',('time',))
    ncvar[:]=julian

    setattr(ncOUT.variables['lon'],"long_name","Longitude")    
    setattr(ncOUT.variables['lat'],"long_name","Latitude")

    
    for var in VARS: 
        avefile=N1pfile[:-6] + var +".nc"        
        ncIN = NC.netcdf_file(avefile,"r")      
        ncvar=ncOUT.createVariable(var,'f',('time','depth','lat','lon'))
        ncvar[:]=ncIN.variables[var].data
        setattr(ncvar,"long_name",var)
        setattr(ncvar,"missing_value",ncIN.variables[var].missing_value)        
        ncIN.close()

    ncOUT.close()    



def writeChlSup(avefile, chlfile):
    path=os.path.dirname(NC.__file__)
    print path
    AVE=NC.netcdf_file(avefile,"r")
    CHL=NC.netcdf_file(chlfile,"w")
    fillValue=AVE.variables['P1i'].missing_value
    
    a=AVE.variables['P1i'].data[0,0,:,:] +\
      AVE.variables['P2i'].data[0,0,:,:] +\
      AVE.variables['P3i'].data[0,0,:,:] +\
      AVE.variables['P4i'].data[0,0,:,:]
      
    a[a>fillValue]=fillValue
    
    DIMS=AVE.dimensions
    
    CHL.createDimension('lon',DIMS['lon'])
    CHL.createDimension('lat',DIMS['lat'])
    CHL.createDimension('time',None)
    ncvar=CHL.createVariable("lchlm",'f',('lat','lon'))
    ncvar[:]=a
    setattr(ncvar,"missing_value",fillValue)
    AVE.close()
    CHL.close()
    
    
def getCentralDayOf5(filename):
    if filename[0]== '2': # caso NUOVO,% adattato per i nuovi nomi .nc        
        year  = int(filename[0:4])
        month = int(filename[4:6])
        day   = int(filename[6:8])
        Day   = datetime.datetime(year,month,day)
        My    = Day + relativedelta(days=2)    
        
    else:  # CASO BINNED
        year = int(filename[1:5])    
        day1 = int(filename[5:8])
        January1=datetime.datetime(year,1,1)    
        My    =  January1+relativedelta(days = day1+1)
    return My.strftime("%Y%m%d")

    
